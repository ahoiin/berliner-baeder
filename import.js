// Generated by IcedCoffeeScript 1.2.0i
(function() {
  var $, BathParser, baseUrl, fs, gm, iced, request, _, __iced_k;

  iced = require('iced-coffee-script').iced;
  __iced_k = function() {};

  fs = require('fs');

  gm = require('googlemaps');

  request = require('request');

  $ = require('jQuery');

  _ = require('underscore');

  _.str = require('underscore.string');

  _.mixin(_.str.exports());

  BathParser = (function() {

    BathParser.name = 'BathParser';

    function BathParser(url) {
      this.url = url;
    }

    BathParser.prototype.fetchBody = function(cb) {
      return request(this.url, function(error, response, body) {
        return cb($(body));
      });
    };

    BathParser.prototype.geocode = function(address, cb) {
      return gm.geocode(address, function(error, response) {
        var location;
        if (!error && response.status === 'OK') {
          location = response.results[0].geometry.location;
          return cb({
            lat: location.lat,
            lng: location.lng
          });
        } else {
          console.log('could not geocode', address);
          return cb();
        }
      });
    };

    BathParser.prototype.run = function(cb) {
      var result, ___iced_passed_deferral, __iced_deferrals,
        _this = this;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: 'import.coffee',
          funcname: 'BathParser.run'
        });
        _this.fetchBody(__iced_deferrals.defer({
          assign_fn: (function(__slot_1) {
            return function() {
              return __slot_1.body = arguments[0];
            };
          })(_this),
          lineno: 26
        }));
        __iced_deferrals._fulfill();
      })(function() {
        result = {
          address: _this.address(),
          name: _this.name(),
          laneLength: _this.laneLength(),
          openingTimes: _this.openingTimes()
        };
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: 'import.coffee',
            funcname: 'BathParser.run'
          });
          _this.geocode(result.address, __iced_deferrals.defer({
            assign_fn: (function(__slot_1) {
              return function() {
                return __slot_1.location = arguments[0];
              };
            })(result),
            lineno: 32
          }));
          __iced_deferrals._fulfill();
        })(function() {
          console.log('finished', result.name);
          return cb(result);
        });
      });
    };

    BathParser.prototype.address = function() {
      var lines;
      lines = this.body.find('#content_left p:first b').html().split('<br>');
      return lines[1] + ', ' + lines[0];
    };

    BathParser.prototype.name = function() {
      return this.body.find('#content h1:first').text();
    };

    BathParser.prototype.laneLength = function() {
      var content;
      content = this.body.find('#content').text();
      if (_.str.include(content, '50-m-Becken')) {
        return '50m';
      } else {
        return '25m';
      }
    };

    BathParser.prototype.openingTimes = function() {
      var lastDay, result, that;
      result = {};
      lastDay = '';
      that = this;
      this.body.find('#content_ul > table:first tr').each(function(index, row) {
        var comment, day, time, _ref;
        _ref = _.map($(row).find('td'), function(node) {
          return _.trim($(node).text());
        }), day = _ref[0], time = _ref[1], comment = _ref[2];
        day || (day = lastDay);
        if (time) that.addTimeTableEntry(result, day, time, comment);
        return lastDay = day;
      });
      return result;
    };

    BathParser.prototype.cleanComment = function(comment) {
      if (_.str.include(comment, 'Parallelbetrieb')) {
        comment = _.str.insert(comment, 'Parallelbetrieb'.length, ' ');
        comment = comment.split('/ ').join('/');
      }
      return comment = _.trim(comment, '*');
    };

    BathParser.prototype.addTimeTableEntry = function(openingTimes, day, time, comment) {
      var from, newEntry, to, _ref;
      _ref = time.split(' - '), from = _ref[0], to = _ref[1];
      comment = this.cleanComment(comment);
      if (comment) {
        newEntry = {
          from: from,
          to: to,
          comment: comment
        };
      } else {
        newEntry = {
          from: from,
          to: to
        };
      }
      openingTimes[day] || (openingTimes[day] = []);
      return openingTimes[day].push(newEntry);
    };

    return BathParser;

  })();

  baseUrl = 'http://www.berlinerbaederbetriebe.de/';

  request(baseUrl + '24.html', function(error, response, body) {
    var bathLinks, baths, content, i, link, openedBaths, url, ___iced_passed_deferral, __iced_deferrals,
      _this = this;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    if (!error && response.statusCode === 200) {
      baths = [];
      bathLinks = $(body).find('div#content > p > a');
      console.log('crawling', bathLinks.length, 'baths');
      (function(__iced_k) {
        var _i, _len;
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: 'import.coffee'
        });
        for (i = _i = 0, _len = bathLinks.length; _i < _len; i = ++_i) {
          link = bathLinks[i];
          url = baseUrl + $(link).attr('href');
          new BathParser(url).run(__iced_deferrals.defer({
            assign_fn: (function(__slot_1, __slot_2) {
              return function() {
                return __slot_1[__slot_2] = arguments[0];
              };
            })(baths, i),
            lineno: 87
          }));
        }
        __iced_deferrals._fulfill();
      })(function() {
        openedBaths = _.reject(baths, function(bath) {
          return _.isEmpty(bath.openingTimes);
        });
        content = 'Baths = ' + JSON.stringify(openedBaths);
        console.log('writing to public/baths.json');
        return __iced_k(fs.writeFile('public/baths.json', content, function(err) {
          if (err) throw err;
        }));
      });
    } else {
      return __iced_k(console.log("could not access", baseUrl));
    }
  });

}).call(this);
